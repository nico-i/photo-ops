// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: b_box.proto

package motif_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BBoxService_GetBBox_FullMethodName      = "/v1.BBoxService/get_b_box"
	BBoxService_GetBBoxDebug_FullMethodName = "/v1.BBoxService/get_b_box_debug"
)

// BBoxServiceClient is the client API for BBoxService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BBoxServiceClient interface {
	// Returns bounding box information for the subject in the image.
	GetBBox(ctx context.Context, in *GetBBoxRequest, opts ...grpc.CallOption) (*GetBBoxResponse, error)
	// Returns the image used to generate the bounding box with the bounding box drawn on it.
	GetBBoxDebug(ctx context.Context, in *GetBBoxDebugRequest, opts ...grpc.CallOption) (*GetBBoxDebugResponse, error)
}

type bBoxServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBBoxServiceClient(cc grpc.ClientConnInterface) BBoxServiceClient {
	return &bBoxServiceClient{cc}
}

func (c *bBoxServiceClient) GetBBox(ctx context.Context, in *GetBBoxRequest, opts ...grpc.CallOption) (*GetBBoxResponse, error) {
	out := new(GetBBoxResponse)
	err := c.cc.Invoke(ctx, BBoxService_GetBBox_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bBoxServiceClient) GetBBoxDebug(ctx context.Context, in *GetBBoxDebugRequest, opts ...grpc.CallOption) (*GetBBoxDebugResponse, error) {
	out := new(GetBBoxDebugResponse)
	err := c.cc.Invoke(ctx, BBoxService_GetBBoxDebug_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BBoxServiceServer is the server API for BBoxService service.
// All implementations must embed UnimplementedBBoxServiceServer
// for forward compatibility
type BBoxServiceServer interface {
	// Returns bounding box information for the subject in the image.
	GetBBox(context.Context, *GetBBoxRequest) (*GetBBoxResponse, error)
	// Returns the image used to generate the bounding box with the bounding box drawn on it.
	GetBBoxDebug(context.Context, *GetBBoxDebugRequest) (*GetBBoxDebugResponse, error)
	mustEmbedUnimplementedBBoxServiceServer()
}

// UnimplementedBBoxServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBBoxServiceServer struct {
}

func (UnimplementedBBoxServiceServer) GetBBox(context.Context, *GetBBoxRequest) (*GetBBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBBox not implemented")
}
func (UnimplementedBBoxServiceServer) GetBBoxDebug(context.Context, *GetBBoxDebugRequest) (*GetBBoxDebugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBBoxDebug not implemented")
}
func (UnimplementedBBoxServiceServer) mustEmbedUnimplementedBBoxServiceServer() {}

// UnsafeBBoxServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BBoxServiceServer will
// result in compilation errors.
type UnsafeBBoxServiceServer interface {
	mustEmbedUnimplementedBBoxServiceServer()
}

func RegisterBBoxServiceServer(s grpc.ServiceRegistrar, srv BBoxServiceServer) {
	s.RegisterService(&BBoxService_ServiceDesc, srv)
}

func _BBoxService_GetBBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBoxServiceServer).GetBBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BBoxService_GetBBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBoxServiceServer).GetBBox(ctx, req.(*GetBBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BBoxService_GetBBoxDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBBoxDebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BBoxServiceServer).GetBBoxDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BBoxService_GetBBoxDebug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BBoxServiceServer).GetBBoxDebug(ctx, req.(*GetBBoxDebugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BBoxService_ServiceDesc is the grpc.ServiceDesc for BBoxService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BBoxService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.BBoxService",
	HandlerType: (*BBoxServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_b_box",
			Handler:    _BBoxService_GetBBox_Handler,
		},
		{
			MethodName: "get_b_box_debug",
			Handler:    _BBoxService_GetBBoxDebug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "b_box.proto",
}
