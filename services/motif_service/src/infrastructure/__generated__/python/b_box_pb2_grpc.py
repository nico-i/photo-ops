# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import b_box_pb2 as b__box__pb2


class BBoxServiceStub(object):
    """Service in charge of providing bounding box information for the subject in a given image.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_b_box = channel.unary_unary(
                '/v1.BBoxService/get_b_box',
                request_serializer=b__box__pb2.GetBBoxRequest.SerializeToString,
                response_deserializer=b__box__pb2.GetBBoxResponse.FromString,
                _registered_method=True)
        self.get_b_box_debug = channel.unary_unary(
                '/v1.BBoxService/get_b_box_debug',
                request_serializer=b__box__pb2.GetBBoxDebugRequest.SerializeToString,
                response_deserializer=b__box__pb2.GetBBoxDebugResponse.FromString,
                _registered_method=True)


class BBoxServiceServicer(object):
    """Service in charge of providing bounding box information for the subject in a given image.
    """

    def get_b_box(self, request, context):
        """Returns bounding box information for the subject in the image.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_b_box_debug(self, request, context):
        """Returns the image used to generate the bounding box with the bounding box drawn on it.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BBoxServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_b_box': grpc.unary_unary_rpc_method_handler(
                    servicer.get_b_box,
                    request_deserializer=b__box__pb2.GetBBoxRequest.FromString,
                    response_serializer=b__box__pb2.GetBBoxResponse.SerializeToString,
            ),
            'get_b_box_debug': grpc.unary_unary_rpc_method_handler(
                    servicer.get_b_box_debug,
                    request_deserializer=b__box__pb2.GetBBoxDebugRequest.FromString,
                    response_serializer=b__box__pb2.GetBBoxDebugResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'v1.BBoxService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('v1.BBoxService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class BBoxService(object):
    """Service in charge of providing bounding box information for the subject in a given image.
    """

    @staticmethod
    def get_b_box(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/v1.BBoxService/get_b_box',
            b__box__pb2.GetBBoxRequest.SerializeToString,
            b__box__pb2.GetBBoxResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_b_box_debug(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/v1.BBoxService/get_b_box_debug',
            b__box__pb2.GetBBoxDebugRequest.SerializeToString,
            b__box__pb2.GetBBoxDebugResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
