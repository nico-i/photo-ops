// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.1
// 	protoc        (unknown)
// source: services/crop_service/v1/crop_service.proto

package crop_servicev1

import (
	v1 "github.com/nico-i/photo-ops/shared/go/__generated__/proto/messages/image_dto/v1"
	v11 "github.com/nico-i/photo-ops/shared/go/__generated__/proto/messages/rect_dto/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Request message for the crop_image method
type CropImageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The image to be cropped
	InputImage *v1.ImageDto `protobuf:"bytes,1,opt,name=input_image,json=inputImage,proto3" json:"input_image,omitempty"`
	// The rectangle to crop the image to
	CropSpec *v11.RectDto `protobuf:"bytes,2,opt,name=crop_spec,json=cropSpec,proto3" json:"crop_spec,omitempty"`
}

func (x *CropImageRequest) Reset() {
	*x = CropImageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_crop_service_v1_crop_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropImageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropImageRequest) ProtoMessage() {}

func (x *CropImageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_crop_service_v1_crop_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropImageRequest.ProtoReflect.Descriptor instead.
func (*CropImageRequest) Descriptor() ([]byte, []int) {
	return file_services_crop_service_v1_crop_service_proto_rawDescGZIP(), []int{0}
}

func (x *CropImageRequest) GetInputImage() *v1.ImageDto {
	if x != nil {
		return x.InputImage
	}
	return nil
}

func (x *CropImageRequest) GetCropSpec() *v11.RectDto {
	if x != nil {
		return x.CropSpec
	}
	return nil
}

type CropImageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cropped image
	CroppedImage *v1.ImageDto `protobuf:"bytes,1,opt,name=cropped_image,json=croppedImage,proto3" json:"cropped_image,omitempty"`
}

func (x *CropImageResponse) Reset() {
	*x = CropImageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_crop_service_v1_crop_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CropImageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CropImageResponse) ProtoMessage() {}

func (x *CropImageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_crop_service_v1_crop_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CropImageResponse.ProtoReflect.Descriptor instead.
func (*CropImageResponse) Descriptor() ([]byte, []int) {
	return file_services_crop_service_v1_crop_service_proto_rawDescGZIP(), []int{1}
}

func (x *CropImageResponse) GetCroppedImage() *v1.ImageDto {
	if x != nil {
		return x.CroppedImage
	}
	return nil
}

// Request message for the get_crop_suggestion method
type GetCropSuggestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The rectangle containing the motif of the image
	ImageMotif *v11.RectDto `protobuf:"bytes,1,opt,name=image_motif,json=imageMotif,proto3" json:"image_motif,omitempty"`
	// The input image width
	ImageWidth uint32 `protobuf:"varint,2,opt,name=image_width,json=imageWidth,proto3" json:"image_width,omitempty"`
	// The input image height
	ImageHeight      uint32 `protobuf:"varint,3,opt,name=image_height,json=imageHeight,proto3" json:"image_height,omitempty"`
	TargetCropWidth  uint32 `protobuf:"varint,4,opt,name=target_crop_width,json=targetCropWidth,proto3" json:"target_crop_width,omitempty"`
	TargetCropHeight uint32 `protobuf:"varint,5,opt,name=target_crop_height,json=targetCropHeight,proto3" json:"target_crop_height,omitempty"`
}

func (x *GetCropSuggestionRequest) Reset() {
	*x = GetCropSuggestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_crop_service_v1_crop_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCropSuggestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCropSuggestionRequest) ProtoMessage() {}

func (x *GetCropSuggestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_services_crop_service_v1_crop_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCropSuggestionRequest.ProtoReflect.Descriptor instead.
func (*GetCropSuggestionRequest) Descriptor() ([]byte, []int) {
	return file_services_crop_service_v1_crop_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetCropSuggestionRequest) GetImageMotif() *v11.RectDto {
	if x != nil {
		return x.ImageMotif
	}
	return nil
}

func (x *GetCropSuggestionRequest) GetImageWidth() uint32 {
	if x != nil {
		return x.ImageWidth
	}
	return 0
}

func (x *GetCropSuggestionRequest) GetImageHeight() uint32 {
	if x != nil {
		return x.ImageHeight
	}
	return 0
}

func (x *GetCropSuggestionRequest) GetTargetCropWidth() uint32 {
	if x != nil {
		return x.TargetCropWidth
	}
	return 0
}

func (x *GetCropSuggestionRequest) GetTargetCropHeight() uint32 {
	if x != nil {
		return x.TargetCropHeight
	}
	return 0
}

type GetCropSuggestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The suggested rectangle to crop the image to
	CropSuggestion *v11.RectDto `protobuf:"bytes,1,opt,name=crop_suggestion,json=cropSuggestion,proto3" json:"crop_suggestion,omitempty"`
}

func (x *GetCropSuggestionResponse) Reset() {
	*x = GetCropSuggestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_services_crop_service_v1_crop_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCropSuggestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCropSuggestionResponse) ProtoMessage() {}

func (x *GetCropSuggestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_services_crop_service_v1_crop_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCropSuggestionResponse.ProtoReflect.Descriptor instead.
func (*GetCropSuggestionResponse) Descriptor() ([]byte, []int) {
	return file_services_crop_service_v1_crop_service_proto_rawDescGZIP(), []int{3}
}

func (x *GetCropSuggestionResponse) GetCropSuggestion() *v11.RectDto {
	if x != nil {
		return x.CropSuggestion
	}
	return nil
}

var File_services_crop_service_v1_crop_service_proto protoreflect.FileDescriptor

var file_services_crop_service_v1_crop_service_proto_rawDesc = []byte{
	0x0a, 0x2b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x63,
	0x72, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x74, 0x6f,
	0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2f, 0x72, 0x65,
	0x63, 0x74, 0x5f, 0x64, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x64,
	0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x6f,
	0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x47, 0x0a,
	0x0b, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x0a, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x73,
	0x70, 0x65, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x74,
	0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x44, 0x74, 0x6f, 0x52,
	0x08, 0x63, 0x72, 0x6f, 0x70, 0x53, 0x70, 0x65, 0x63, 0x22, 0x60, 0x0a, 0x11, 0x43, 0x72, 0x6f,
	0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b,
	0x0a, 0x0d, 0x63, 0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x74,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x74, 0x6f, 0x52, 0x0c, 0x63,
	0x72, 0x6f, 0x70, 0x70, 0x65, 0x64, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xff, 0x01, 0x0a, 0x18,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x70, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x45, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x6f, 0x74, 0x69, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x2e,
	0x72, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x63, 0x74,
	0x44, 0x74, 0x6f, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x6f, 0x74, 0x69, 0x66, 0x12,
	0x1f, 0x0a, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x57, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x48, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x72,
	0x6f, 0x70, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x70, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12,
	0x2c, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x68,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x70, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x22, 0x6a, 0x0a,
	0x19, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x70, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0f, 0x63, 0x72,
	0x6f, 0x70, 0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x73, 0x2e, 0x72, 0x65, 0x63, 0x74, 0x5f, 0x64, 0x74, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x63, 0x74, 0x44, 0x74, 0x6f, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x70, 0x53,
	0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x86, 0x02, 0x0a, 0x0b, 0x43, 0x72,
	0x6f, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x68, 0x0a, 0x0a, 0x63, 0x72, 0x6f,
	0x70, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x2e, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f, 0x70, 0x49, 0x6d,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x72, 0x6f,
	0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x6f,
	0x70, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x3a, 0x01, 0x2a, 0x22, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x72, 0x6f, 0x70, 0x12, 0x8c, 0x01, 0x0a, 0x13, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x72, 0x6f, 0x70,
	0x5f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x2e, 0x63, 0x72,
	0x6f, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x6f, 0x70, 0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x70,
	0x53, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x01, 0x2a, 0x22, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x63, 0x72, 0x6f, 0x70, 0x2f, 0x73, 0x75, 0x67, 0x67, 0x65, 0x73, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0xe3, 0x01, 0x0a, 0x13, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x72, 0x6f, 0x70, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x10, 0x43, 0x72, 0x6f, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x61,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6e, 0x69, 0x63, 0x6f, 0x2d,
	0x69, 0x2f, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x2d, 0x6f, 0x70, 0x73, 0x2f, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2f, 0x67, 0x6f, 0x2f, 0x5f, 0x5f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x5f, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2f, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x63, 0x72, 0x6f, 0x70, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58, 0xaa, 0x02, 0x0e, 0x43, 0x72, 0x6f, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x0e, 0x43, 0x72, 0x6f, 0x70, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1a, 0x43, 0x72, 0x6f, 0x70,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0f, 0x43, 0x72, 0x6f, 0x70, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_services_crop_service_v1_crop_service_proto_rawDescOnce sync.Once
	file_services_crop_service_v1_crop_service_proto_rawDescData = file_services_crop_service_v1_crop_service_proto_rawDesc
)

func file_services_crop_service_v1_crop_service_proto_rawDescGZIP() []byte {
	file_services_crop_service_v1_crop_service_proto_rawDescOnce.Do(func() {
		file_services_crop_service_v1_crop_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_services_crop_service_v1_crop_service_proto_rawDescData)
	})
	return file_services_crop_service_v1_crop_service_proto_rawDescData
}

var file_services_crop_service_v1_crop_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_services_crop_service_v1_crop_service_proto_goTypes = []interface{}{
	(*CropImageRequest)(nil),          // 0: crop_service.v1.CropImageRequest
	(*CropImageResponse)(nil),         // 1: crop_service.v1.CropImageResponse
	(*GetCropSuggestionRequest)(nil),  // 2: crop_service.v1.GetCropSuggestionRequest
	(*GetCropSuggestionResponse)(nil), // 3: crop_service.v1.GetCropSuggestionResponse
	(*v1.ImageDto)(nil),               // 4: shared.messages.image_dto.v1.ImageDto
	(*v11.RectDto)(nil),               // 5: shared.messages.rect_dto.v1.RectDto
}
var file_services_crop_service_v1_crop_service_proto_depIdxs = []int32{
	4, // 0: crop_service.v1.CropImageRequest.input_image:type_name -> shared.messages.image_dto.v1.ImageDto
	5, // 1: crop_service.v1.CropImageRequest.crop_spec:type_name -> shared.messages.rect_dto.v1.RectDto
	4, // 2: crop_service.v1.CropImageResponse.cropped_image:type_name -> shared.messages.image_dto.v1.ImageDto
	5, // 3: crop_service.v1.GetCropSuggestionRequest.image_motif:type_name -> shared.messages.rect_dto.v1.RectDto
	5, // 4: crop_service.v1.GetCropSuggestionResponse.crop_suggestion:type_name -> shared.messages.rect_dto.v1.RectDto
	0, // 5: crop_service.v1.CropService.crop_image:input_type -> crop_service.v1.CropImageRequest
	2, // 6: crop_service.v1.CropService.get_crop_suggestion:input_type -> crop_service.v1.GetCropSuggestionRequest
	1, // 7: crop_service.v1.CropService.crop_image:output_type -> crop_service.v1.CropImageResponse
	3, // 8: crop_service.v1.CropService.get_crop_suggestion:output_type -> crop_service.v1.GetCropSuggestionResponse
	7, // [7:9] is the sub-list for method output_type
	5, // [5:7] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_services_crop_service_v1_crop_service_proto_init() }
func file_services_crop_service_v1_crop_service_proto_init() {
	if File_services_crop_service_v1_crop_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_services_crop_service_v1_crop_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropImageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_crop_service_v1_crop_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CropImageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_crop_service_v1_crop_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCropSuggestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_services_crop_service_v1_crop_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCropSuggestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_services_crop_service_v1_crop_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_services_crop_service_v1_crop_service_proto_goTypes,
		DependencyIndexes: file_services_crop_service_v1_crop_service_proto_depIdxs,
		MessageInfos:      file_services_crop_service_v1_crop_service_proto_msgTypes,
	}.Build()
	File_services_crop_service_v1_crop_service_proto = out.File
	file_services_crop_service_v1_crop_service_proto_rawDesc = nil
	file_services_crop_service_v1_crop_service_proto_goTypes = nil
	file_services_crop_service_v1_crop_service_proto_depIdxs = nil
}
