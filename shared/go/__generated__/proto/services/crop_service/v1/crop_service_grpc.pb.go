// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: services/crop_service/v1/crop_service.proto

package crop_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CropService_CropImage_FullMethodName         = "/crop_service.v1.CropService/crop_image"
	CropService_GetCropSuggestion_FullMethodName = "/crop_service.v1.CropService/get_crop_suggestion"
)

// CropServiceClient is the client API for CropService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to handle all image cropping related operations
type CropServiceClient interface {
	// Crop an image to a given rectangle
	CropImage(ctx context.Context, in *CropImageRequest, opts ...grpc.CallOption) (*CropImageResponse, error)
	// Provide a crop suggestion based on a given image and its motif.
	// The suggestion is created by trying to put the motif into the center of the crop spec.option
	// If the motif is too large no crop suggestion will be provided.
	GetCropSuggestion(ctx context.Context, in *GetCropSuggestionRequest, opts ...grpc.CallOption) (*GetCropSuggestionResponse, error)
}

type cropServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCropServiceClient(cc grpc.ClientConnInterface) CropServiceClient {
	return &cropServiceClient{cc}
}

func (c *cropServiceClient) CropImage(ctx context.Context, in *CropImageRequest, opts ...grpc.CallOption) (*CropImageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CropImageResponse)
	err := c.cc.Invoke(ctx, CropService_CropImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cropServiceClient) GetCropSuggestion(ctx context.Context, in *GetCropSuggestionRequest, opts ...grpc.CallOption) (*GetCropSuggestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCropSuggestionResponse)
	err := c.cc.Invoke(ctx, CropService_GetCropSuggestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CropServiceServer is the server API for CropService service.
// All implementations must embed UnimplementedCropServiceServer
// for forward compatibility
//
// Service to handle all image cropping related operations
type CropServiceServer interface {
	// Crop an image to a given rectangle
	CropImage(context.Context, *CropImageRequest) (*CropImageResponse, error)
	// Provide a crop suggestion based on a given image and its motif.
	// The suggestion is created by trying to put the motif into the center of the crop spec.option
	// If the motif is too large no crop suggestion will be provided.
	GetCropSuggestion(context.Context, *GetCropSuggestionRequest) (*GetCropSuggestionResponse, error)
	mustEmbedUnimplementedCropServiceServer()
}

// UnimplementedCropServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCropServiceServer struct {
}

func (UnimplementedCropServiceServer) CropImage(context.Context, *CropImageRequest) (*CropImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CropImage not implemented")
}
func (UnimplementedCropServiceServer) GetCropSuggestion(context.Context, *GetCropSuggestionRequest) (*GetCropSuggestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCropSuggestion not implemented")
}
func (UnimplementedCropServiceServer) mustEmbedUnimplementedCropServiceServer() {}

// UnsafeCropServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CropServiceServer will
// result in compilation errors.
type UnsafeCropServiceServer interface {
	mustEmbedUnimplementedCropServiceServer()
}

func RegisterCropServiceServer(s grpc.ServiceRegistrar, srv CropServiceServer) {
	s.RegisterService(&CropService_ServiceDesc, srv)
}

func _CropService_CropImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CropImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CropServiceServer).CropImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CropService_CropImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CropServiceServer).CropImage(ctx, req.(*CropImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CropService_GetCropSuggestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCropSuggestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CropServiceServer).GetCropSuggestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CropService_GetCropSuggestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CropServiceServer).GetCropSuggestion(ctx, req.(*GetCropSuggestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CropService_ServiceDesc is the grpc.ServiceDesc for CropService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CropService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crop_service.v1.CropService",
	HandlerType: (*CropServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "crop_image",
			Handler:    _CropService_CropImage_Handler,
		},
		{
			MethodName: "get_crop_suggestion",
			Handler:    _CropService_GetCropSuggestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/crop_service/v1/crop_service.proto",
}
