// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: services/hashtag_service/v1/hashtag_service.proto

package hashtag_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	HashtagService_GetHashtags_FullMethodName = "/hashtag_service.v1.HashtagService/get_hashtags"
)

// HashtagServiceClient is the client API for HashtagService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service for all hashtag related operations
type HashtagServiceClient interface {
	// Get hashtags for a give caption
	GetHashtags(ctx context.Context, in *GetHashtagsRequest, opts ...grpc.CallOption) (*GetHashtagsResponse, error)
}

type hashtagServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHashtagServiceClient(cc grpc.ClientConnInterface) HashtagServiceClient {
	return &hashtagServiceClient{cc}
}

func (c *hashtagServiceClient) GetHashtags(ctx context.Context, in *GetHashtagsRequest, opts ...grpc.CallOption) (*GetHashtagsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetHashtagsResponse)
	err := c.cc.Invoke(ctx, HashtagService_GetHashtags_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HashtagServiceServer is the server API for HashtagService service.
// All implementations must embed UnimplementedHashtagServiceServer
// for forward compatibility
//
// Service for all hashtag related operations
type HashtagServiceServer interface {
	// Get hashtags for a give caption
	GetHashtags(context.Context, *GetHashtagsRequest) (*GetHashtagsResponse, error)
	mustEmbedUnimplementedHashtagServiceServer()
}

// UnimplementedHashtagServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHashtagServiceServer struct {
}

func (UnimplementedHashtagServiceServer) GetHashtags(context.Context, *GetHashtagsRequest) (*GetHashtagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetHashtags not implemented")
}
func (UnimplementedHashtagServiceServer) mustEmbedUnimplementedHashtagServiceServer() {}

// UnsafeHashtagServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HashtagServiceServer will
// result in compilation errors.
type UnsafeHashtagServiceServer interface {
	mustEmbedUnimplementedHashtagServiceServer()
}

func RegisterHashtagServiceServer(s grpc.ServiceRegistrar, srv HashtagServiceServer) {
	s.RegisterService(&HashtagService_ServiceDesc, srv)
}

func _HashtagService_GetHashtags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHashtagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HashtagServiceServer).GetHashtags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HashtagService_GetHashtags_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HashtagServiceServer).GetHashtags(ctx, req.(*GetHashtagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HashtagService_ServiceDesc is the grpc.ServiceDesc for HashtagService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HashtagService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hashtag_service.v1.HashtagService",
	HandlerType: (*HashtagServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_hashtags",
			Handler:    _HashtagService_GetHashtags_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/hashtag_service/v1/hashtag_service.proto",
}
