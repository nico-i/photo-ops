// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: services/caption_service/v1/caption_service.proto

package caption_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	CaptionService_GetCaption_FullMethodName = "/caption_service.v1.CaptionService/get_caption"
)

// CaptionServiceClient is the client API for CaptionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service to handle all image captioning operations
type CaptionServiceClient interface {
	// Get caption for an image
	GetCaption(ctx context.Context, in *GetCaptionRequest, opts ...grpc.CallOption) (*GetCaptionResponse, error)
}

type captionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCaptionServiceClient(cc grpc.ClientConnInterface) CaptionServiceClient {
	return &captionServiceClient{cc}
}

func (c *captionServiceClient) GetCaption(ctx context.Context, in *GetCaptionRequest, opts ...grpc.CallOption) (*GetCaptionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCaptionResponse)
	err := c.cc.Invoke(ctx, CaptionService_GetCaption_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CaptionServiceServer is the server API for CaptionService service.
// All implementations must embed UnimplementedCaptionServiceServer
// for forward compatibility
//
// Service to handle all image captioning operations
type CaptionServiceServer interface {
	// Get caption for an image
	GetCaption(context.Context, *GetCaptionRequest) (*GetCaptionResponse, error)
	mustEmbedUnimplementedCaptionServiceServer()
}

// UnimplementedCaptionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCaptionServiceServer struct {
}

func (UnimplementedCaptionServiceServer) GetCaption(context.Context, *GetCaptionRequest) (*GetCaptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCaption not implemented")
}
func (UnimplementedCaptionServiceServer) mustEmbedUnimplementedCaptionServiceServer() {}

// UnsafeCaptionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CaptionServiceServer will
// result in compilation errors.
type UnsafeCaptionServiceServer interface {
	mustEmbedUnimplementedCaptionServiceServer()
}

func RegisterCaptionServiceServer(s grpc.ServiceRegistrar, srv CaptionServiceServer) {
	s.RegisterService(&CaptionService_ServiceDesc, srv)
}

func _CaptionService_GetCaption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCaptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CaptionServiceServer).GetCaption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CaptionService_GetCaption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CaptionServiceServer).GetCaption(ctx, req.(*GetCaptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CaptionService_ServiceDesc is the grpc.ServiceDesc for CaptionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CaptionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "caption_service.v1.CaptionService",
	HandlerType: (*CaptionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_caption",
			Handler:    _CaptionService_GetCaption_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/caption_service/v1/caption_service.proto",
}
