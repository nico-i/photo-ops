// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: services/motif_service/v1/motif_service.proto

package motif_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	MotifService_GetBBox_FullMethodName      = "/motif_service.v1.MotifService/get_b_box"
	MotifService_GetBBoxDebug_FullMethodName = "/motif_service.v1.MotifService/get_b_box_debug"
)

// MotifServiceClient is the client API for MotifService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Service responsible for handling all motif related operations.
type MotifServiceClient interface {
	// Returns bounding box information for the subject in the image.
	GetBBox(ctx context.Context, in *GetBBoxRequest, opts ...grpc.CallOption) (*GetBBoxResponse, error)
	// Returns the image used to generate the bounding box with the bounding box drawn on it.
	GetBBoxDebug(ctx context.Context, in *GetBBoxDebugRequest, opts ...grpc.CallOption) (*GetBBoxDebugResponse, error)
}

type motifServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMotifServiceClient(cc grpc.ClientConnInterface) MotifServiceClient {
	return &motifServiceClient{cc}
}

func (c *motifServiceClient) GetBBox(ctx context.Context, in *GetBBoxRequest, opts ...grpc.CallOption) (*GetBBoxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBBoxResponse)
	err := c.cc.Invoke(ctx, MotifService_GetBBox_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *motifServiceClient) GetBBoxDebug(ctx context.Context, in *GetBBoxDebugRequest, opts ...grpc.CallOption) (*GetBBoxDebugResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetBBoxDebugResponse)
	err := c.cc.Invoke(ctx, MotifService_GetBBoxDebug_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MotifServiceServer is the server API for MotifService service.
// All implementations must embed UnimplementedMotifServiceServer
// for forward compatibility
//
// Service responsible for handling all motif related operations.
type MotifServiceServer interface {
	// Returns bounding box information for the subject in the image.
	GetBBox(context.Context, *GetBBoxRequest) (*GetBBoxResponse, error)
	// Returns the image used to generate the bounding box with the bounding box drawn on it.
	GetBBoxDebug(context.Context, *GetBBoxDebugRequest) (*GetBBoxDebugResponse, error)
	mustEmbedUnimplementedMotifServiceServer()
}

// UnimplementedMotifServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMotifServiceServer struct {
}

func (UnimplementedMotifServiceServer) GetBBox(context.Context, *GetBBoxRequest) (*GetBBoxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBBox not implemented")
}
func (UnimplementedMotifServiceServer) GetBBoxDebug(context.Context, *GetBBoxDebugRequest) (*GetBBoxDebugResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBBoxDebug not implemented")
}
func (UnimplementedMotifServiceServer) mustEmbedUnimplementedMotifServiceServer() {}

// UnsafeMotifServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MotifServiceServer will
// result in compilation errors.
type UnsafeMotifServiceServer interface {
	mustEmbedUnimplementedMotifServiceServer()
}

func RegisterMotifServiceServer(s grpc.ServiceRegistrar, srv MotifServiceServer) {
	s.RegisterService(&MotifService_ServiceDesc, srv)
}

func _MotifService_GetBBox_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBBoxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotifServiceServer).GetBBox(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotifService_GetBBox_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotifServiceServer).GetBBox(ctx, req.(*GetBBoxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MotifService_GetBBoxDebug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBBoxDebugRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MotifServiceServer).GetBBoxDebug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MotifService_GetBBoxDebug_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MotifServiceServer).GetBBoxDebug(ctx, req.(*GetBBoxDebugRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MotifService_ServiceDesc is the grpc.ServiceDesc for MotifService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MotifService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "motif_service.v1.MotifService",
	HandlerType: (*MotifServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_b_box",
			Handler:    _MotifService_GetBBox_Handler,
		},
		{
			MethodName: "get_b_box_debug",
			Handler:    _MotifService_GetBBoxDebug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/motif_service/v1/motif_service.proto",
}
