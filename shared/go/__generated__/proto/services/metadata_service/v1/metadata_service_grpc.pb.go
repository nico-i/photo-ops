// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: services/metadata_service/v1/metadata_service.proto

package metadata_servicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MetaDataService_UpdateIptcData_FullMethodName = "/metadata_service.v1.MetaDataService/update_iptc_data"
)

// MetaDataServiceClient is the client API for MetaDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetaDataServiceClient interface {
	// Update the IPTC data for an image with the given caption and hashtags
	UpdateIptcData(ctx context.Context, in *UpdateIPTCDataRequest, opts ...grpc.CallOption) (*UpdateIPTCDataResponse, error)
}

type metaDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMetaDataServiceClient(cc grpc.ClientConnInterface) MetaDataServiceClient {
	return &metaDataServiceClient{cc}
}

func (c *metaDataServiceClient) UpdateIptcData(ctx context.Context, in *UpdateIPTCDataRequest, opts ...grpc.CallOption) (*UpdateIPTCDataResponse, error) {
	out := new(UpdateIPTCDataResponse)
	err := c.cc.Invoke(ctx, MetaDataService_UpdateIptcData_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetaDataServiceServer is the server API for MetaDataService service.
// All implementations must embed UnimplementedMetaDataServiceServer
// for forward compatibility
type MetaDataServiceServer interface {
	// Update the IPTC data for an image with the given caption and hashtags
	UpdateIptcData(context.Context, *UpdateIPTCDataRequest) (*UpdateIPTCDataResponse, error)
	mustEmbedUnimplementedMetaDataServiceServer()
}

// UnimplementedMetaDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMetaDataServiceServer struct {
}

func (UnimplementedMetaDataServiceServer) UpdateIptcData(context.Context, *UpdateIPTCDataRequest) (*UpdateIPTCDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateIptcData not implemented")
}
func (UnimplementedMetaDataServiceServer) mustEmbedUnimplementedMetaDataServiceServer() {}

// UnsafeMetaDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetaDataServiceServer will
// result in compilation errors.
type UnsafeMetaDataServiceServer interface {
	mustEmbedUnimplementedMetaDataServiceServer()
}

func RegisterMetaDataServiceServer(s grpc.ServiceRegistrar, srv MetaDataServiceServer) {
	s.RegisterService(&MetaDataService_ServiceDesc, srv)
}

func _MetaDataService_UpdateIptcData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateIPTCDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetaDataServiceServer).UpdateIptcData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MetaDataService_UpdateIptcData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetaDataServiceServer).UpdateIptcData(ctx, req.(*UpdateIPTCDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MetaDataService_ServiceDesc is the grpc.ServiceDesc for MetaDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetaDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "metadata_service.v1.MetaDataService",
	HandlerType: (*MetaDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "update_iptc_data",
			Handler:    _MetaDataService_UpdateIptcData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/metadata_service/v1/metadata_service.proto",
}
