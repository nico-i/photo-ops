# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from services.hashtag_service.v1 import hashtag_service_pb2 as services_dot_hashtag__service_dot_v1_dot_hashtag__service__pb2


class HashtagServiceStub(object):
    """Service for all hashtag related operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.get_hashtags = channel.unary_unary(
                '/hashtag_service.v1.HashtagService/get_hashtags',
                request_serializer=services_dot_hashtag__service_dot_v1_dot_hashtag__service__pb2.GetHashtagsRequest.SerializeToString,
                response_deserializer=services_dot_hashtag__service_dot_v1_dot_hashtag__service__pb2.GetHashtagsResponse.FromString,
                _registered_method=True)


class HashtagServiceServicer(object):
    """Service for all hashtag related operations
    """

    def get_hashtags(self, request, context):
        """Get hashtags for a give caption
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HashtagServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'get_hashtags': grpc.unary_unary_rpc_method_handler(
                    servicer.get_hashtags,
                    request_deserializer=services_dot_hashtag__service_dot_v1_dot_hashtag__service__pb2.GetHashtagsRequest.FromString,
                    response_serializer=services_dot_hashtag__service_dot_v1_dot_hashtag__service__pb2.GetHashtagsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'hashtag_service.v1.HashtagService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('hashtag_service.v1.HashtagService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HashtagService(object):
    """Service for all hashtag related operations
    """

    @staticmethod
    def get_hashtags(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/hashtag_service.v1.HashtagService/get_hashtags',
            services_dot_hashtag__service_dot_v1_dot_hashtag__service__pb2.GetHashtagsRequest.SerializeToString,
            services_dot_hashtag__service_dot_v1_dot_hashtag__service__pb2.GetHashtagsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
