# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from services.crop_service.v1 import crop_service_pb2 as services_dot_crop__service_dot_v1_dot_crop__service__pb2


class CropServiceStub(object):
    """Service to handle all image cropping related operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.crop_image = channel.unary_unary(
                '/crop_service.v1.CropService/crop_image',
                request_serializer=services_dot_crop__service_dot_v1_dot_crop__service__pb2.CropImageRequest.SerializeToString,
                response_deserializer=services_dot_crop__service_dot_v1_dot_crop__service__pb2.CropImageResponse.FromString,
                _registered_method=True)
        self.get_crop_suggestion = channel.unary_unary(
                '/crop_service.v1.CropService/get_crop_suggestion',
                request_serializer=services_dot_crop__service_dot_v1_dot_crop__service__pb2.GetCropSuggestionRequest.SerializeToString,
                response_deserializer=services_dot_crop__service_dot_v1_dot_crop__service__pb2.GetCropSuggestionResponse.FromString,
                _registered_method=True)


class CropServiceServicer(object):
    """Service to handle all image cropping related operations
    """

    def crop_image(self, request, context):
        """
        Crop an image to a given rectangle
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_crop_suggestion(self, request, context):
        """
        Provide a crop suggestion based on a given image and its motif.
        The suggestion is created by trying to put the motif into the center of the crop spec.option
        If the motif is too large no crop suggestion will be provided.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CropServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'crop_image': grpc.unary_unary_rpc_method_handler(
                    servicer.crop_image,
                    request_deserializer=services_dot_crop__service_dot_v1_dot_crop__service__pb2.CropImageRequest.FromString,
                    response_serializer=services_dot_crop__service_dot_v1_dot_crop__service__pb2.CropImageResponse.SerializeToString,
            ),
            'get_crop_suggestion': grpc.unary_unary_rpc_method_handler(
                    servicer.get_crop_suggestion,
                    request_deserializer=services_dot_crop__service_dot_v1_dot_crop__service__pb2.GetCropSuggestionRequest.FromString,
                    response_serializer=services_dot_crop__service_dot_v1_dot_crop__service__pb2.GetCropSuggestionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'crop_service.v1.CropService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('crop_service.v1.CropService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CropService(object):
    """Service to handle all image cropping related operations
    """

    @staticmethod
    def crop_image(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/crop_service.v1.CropService/crop_image',
            services_dot_crop__service_dot_v1_dot_crop__service__pb2.CropImageRequest.SerializeToString,
            services_dot_crop__service_dot_v1_dot_crop__service__pb2.CropImageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def get_crop_suggestion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/crop_service.v1.CropService/get_crop_suggestion',
            services_dot_crop__service_dot_v1_dot_crop__service__pb2.GetCropSuggestionRequest.SerializeToString,
            services_dot_crop__service_dot_v1_dot_crop__service__pb2.GetCropSuggestionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
