# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from services.metadata_service.v1 import metadata_service_pb2 as services_dot_metadata__service_dot_v1_dot_metadata__service__pb2


class MetaDataServiceStub(object):
    """Service handling all image metadata related operations
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.update_iptc_data = channel.unary_unary(
                '/metadata_service.v1.MetaDataService/update_iptc_data',
                request_serializer=services_dot_metadata__service_dot_v1_dot_metadata__service__pb2.UpdateIPTCDataRequest.SerializeToString,
                response_deserializer=services_dot_metadata__service_dot_v1_dot_metadata__service__pb2.UpdateIPTCDataResponse.FromString,
                _registered_method=True)


class MetaDataServiceServicer(object):
    """Service handling all image metadata related operations
    """

    def update_iptc_data(self, request, context):
        """Update the IPTC data for an image with the given caption and hashtags
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MetaDataServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'update_iptc_data': grpc.unary_unary_rpc_method_handler(
                    servicer.update_iptc_data,
                    request_deserializer=services_dot_metadata__service_dot_v1_dot_metadata__service__pb2.UpdateIPTCDataRequest.FromString,
                    response_serializer=services_dot_metadata__service_dot_v1_dot_metadata__service__pb2.UpdateIPTCDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'metadata_service.v1.MetaDataService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('metadata_service.v1.MetaDataService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class MetaDataService(object):
    """Service handling all image metadata related operations
    """

    @staticmethod
    def update_iptc_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/metadata_service.v1.MetaDataService/update_iptc_data',
            services_dot_metadata__service_dot_v1_dot_metadata__service__pb2.UpdateIPTCDataRequest.SerializeToString,
            services_dot_metadata__service_dot_v1_dot_metadata__service__pb2.UpdateIPTCDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
